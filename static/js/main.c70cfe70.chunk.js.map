{"version":3,"sources":["index.js","reducers/postReducer.js","reducers/index.js","actions/index.js","Store.js","components/Posts.jsx","actions/postActions.js","components/PostForm.jsx","components/Header.jsx","serviceWorker.js","index.jsx","App.jsx"],"names":["require","initialState","item","items","combineReducers","posts","state","type","payload","middleware","thunk","store","createStore","rootReducer","applyMiddleware","Posts","fetchPosts","this","props","postItems","map","post","className","key","id","title","body","Component","mapDispatchToProps","dispatch","a","axios","get","data","connect","PostForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","createNewPost","rows","postData","response","Header","href","Boolean","window","location","hostname","match","ReactDOM","render","Store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c70cfe70.chunk.js","sourcesContent":["require('./index.jsx');\n","import { FETCH_POSTS, CREATE_NEW_POST } from '../actions';\n\nconst initialState = {\n  item: null,\n  items: [],\n};\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case FETCH_POSTS:\n      return {\n        ...state,\n        items: payload,\n      };\n    case CREATE_NEW_POST:\n      return {\n        ...state,\n        items: [payload, ...state.items],\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport postReducer from './postReducer';\n\nexport default combineReducers({\n  posts: postReducer,\n});\n","export const FETCH_POSTS = 'FETCH_POSTS';\nexport const CREATE_NEW_POST = 'CREATE_NEW_POST';\n","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middleware));\n\nexport default store;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts as actionFetchPosts } from '../actions/postActions';\n\nimport '../styles/Posts.css';\n\nclass Posts extends Component {\n  componentDidMount() {\n    const { fetchPosts } = this.props;\n    fetchPosts();\n  }\n\n  render() {\n    const { posts } = this.props;\n\n    const postItems = posts.map((post) => (\n      <div className=\"post\" key={post.id}>\n        <h5 className=\"text-capitalize\">{post.title}</h5>\n        <p className=\"text-justify\">{post.body}</p>\n      </div>\n    ));\n\n    return (\n      <div>\n        <h3>Posts</h3>\n        <hr className=\"mb-4\" />\n\n        {postItems}\n      </div>\n    );\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fetchPosts: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  posts: state.posts.items,\n});\n\nconst mapDispatchToProps = {\n  fetchPosts: actionFetchPosts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n","import axios from 'axios';\nimport { FETCH_POSTS, CREATE_NEW_POST } from '.';\n\nconst fetchPosts = () => async (dispatch) => {\n  const data = await axios.get('https://jsonplaceholder.typicode.com/posts');\n  dispatch({\n    type: FETCH_POSTS,\n    payload: data.data,\n  });\n};\n\nconst createNewPost = (postData) => async (dispatch) => {\n  const response = await axios.post('https://jsonplaceholder.typicode.com/posts', postData);\n  dispatch({\n    type: CREATE_NEW_POST,\n    payload: response.data,\n  });\n};\n\nexport {\n  fetchPosts,\n  createNewPost,\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { createNewPost as actionCreateNewPost } from '../actions/postActions';\n\nexport class PostForm extends Component {\n  constructor() {\n    super();\n    this.state = { title: '', body: '' };\n  }\n\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    const { title, body } = this.state;\n    const { createNewPost } = this.props;\n\n    const postData = { title, body };\n    createNewPost(postData);\n  };\n\n  render() {\n    const { title, body } = this.state;\n\n    return (\n      <div>\n        <h3>Create New Post</h3>\n        <hr className=\"mb-4\" />\n\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <small className=\"text-secondary mb-2\">Title</small>\n            <input type=\"text\" className=\"form-control rounded-0\" name=\"title\" value={title} onChange={this.onChange} />\n          </div>\n\n          <div className=\"form-group\">\n            <small className=\"text-secondary mb-2\">Body</small>\n            <textarea className=\"form-control rounded-0\" rows=\"5\" name=\"body\" value={body} onChange={this.onChange} />\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-dark btn-block rounded-0 mt-4 py-2\">\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <span className=\"font-weight-bold\">SUBMIT</span>\n              <i className=\"material-icons\">play_arrow</i>\n            </div>\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nPostForm.propTypes = {\n  createNewPost: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  createNewPost: actionCreateNewPost,\n};\n\nexport default connect(null, mapDispatchToProps)(PostForm);\n","import React from 'react';\n\nconst Header = () => (\n  <nav className=\"navbar navbar-dark bg-dark flex-center mb-5\">\n    <a href=\"/\" className=\"navbar-brand font-weight-bold\">Dummy Blog</a>\n  </nav>\n);\n\nexport default Header;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport Store from './Store';\nimport Posts from './components/Posts';\nimport PostForm from './components/PostForm';\nimport Header from './components/Header';\n\nexport default function App() {\n  return (\n    <Provider store={Store}>\n      <div className=\"container mt-5\">\n        <Header />\n\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <Posts />\n          </div>\n          <div className=\"col-4\">\n            <PostForm />\n          </div>\n        </div>\n      </div>\n    </Provider>\n  );\n}\n"],"sourceRoot":""}